
00h 50m

Загальна схема
Дані зберігаються на сервері у списку, цей список серіалізується у Json формат, 
який, у свою чергу, перетворюється у байт-формат і останній передається 
клієнту - клієнт приймає, десеріалізує, відображає у візуальному компоненті


Етапи створення проекту

1 - Створити стандартний сервер, що працюватиме у асинхронному режимі (застосування 
TAP підходу - на елементах Task) - логіка аналогічна створеному на парі ServerAsyncTAP


2 - Створити бібліотеку класів (ProductLibrary) 
	- ПКМ на рішенні - додати проект - бібліотека класів (має бути на технології,
	аналогічній технології проекту, у даному разі .NET 6)

	- Надати класу портібну назву (Product)

	- наповнити клас потрібним функціоналом

	- додати посилання на бібліотеку до проектів, що її використовуватимуть - ПКМ 
	на папці Зависимости - Додати посилання на проект... - поставити галку на потрібному,
	у самому проекті, що підключає бібліотеку додати посилання на відповідний 
	простір імен (using ProductLibrary;)


3 - У проекті сервера (ServerAsyncTAP) - створити колекцію елементів, описаних у 
класі-бібліотеці, ініціалізувати на наповнити колекцію тестовими даними 
(імітація роботи з БД)


4 - Додати до форми сервера елемент для виведення інф у табличній формі dataGridView


5 - Додати до форми сервера кнопку для відправки даних (колекції Product)


6 - Додати метод для оновлення вмісту візуального компонента після модифікації колекції
(ListUpdate();)
	- додати виклик даного методу після додавання елементів у колекцію


(7-8 демонстрація роботи з Json)
7 - Для демонстрації роботи з форматом Json додати 2 кнопки
	- btnCreateJsonFile
	- btnShowJsonFile


8 - Наповнити події натиснення кнопок функціоналом - одну серіалізація 
та збереження даних у файл, іншу читання з файлу, десеріалізація та 
відображення у відповідному візуальному компоненті


9 - Створити логіку відправки даних - розділити відповідну логіку між
серверним (серіалізація, відправка) та клієнтським (отримання,  десеріалізація,
демонстрація результату) застосунком


10 -  Наповнити логікою подію натиснення на кнопку відправки серіалізованих даних 
(btnSendDataJson) - по суті скопіювати вміст події по натиснення btnStartServer
(кнопка запуска сервера) - рядок коду, де формується рядок (string),  що відправлятиметься 
клієнту змінити, вставивши фрагмент серіалізації колекції елементів Product


11 - Додати до рішення проект клієнта - (.NET 6 Десктопний WinForms додаток) ClientJson 


12 - Клієнт - до форми додати компоненти dataGridView та кнопку btnReceiveData (
по натисненню на яку клієнт зв'язуватиметься з сервером)


13 - Подія по натисненні на кнопку отримання даних (btnReceiveData) - наповнити 
функціоналом щодо отримання, ДЕсеріалізації та виведення даних